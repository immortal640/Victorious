// This code has been generated by ChatGPT 4-o, which was created by OpenAI
// The generated code has been modified though.

using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

using TOOLS;

namespace Victorious
{
    public class TcpServer
    {
        private static TcpListener server;

        public static Dictionary<Guid, TcpClient> Clients { get; set; } = new Dictionary<Guid, TcpClient>(); // List to track connected clients
        public static Dictionary<Guid, string> Usernames { get; set; } = new Dictionary<Guid, string>();
        public static string LatestMessage { get; private set; }

        public static void Start(int port)
        {
            server = new TcpListener(IPAddress.Any, port);
            server.Start();
            Console.WriteLine($"Server started on port {port}");

            Thread serverThread = new Thread(() =>
            {
                while (true)
                {
                    try
                    {
                        TcpClient client = server.AcceptTcpClient();
                        Console.WriteLine($"Client connected! [{client.Client.LocalEndPoint.ToString()}]");

                        Thread clientThread = new Thread(() => HandleClient(client));
                        clientThread.Start();
                    }
                    catch (SocketException)
                    {
                        Console.WriteLine("Server stopped.");
                        break;
                    }
                }
            });

            serverThread.IsBackground = true;
            serverThread.Start();
        }

        public static void Stop()
        {
            server.Stop();
            Console.WriteLine("Server stopped.");
        }

        private static void HandleClient(TcpClient client)
        {
            NetworkStream stream = client.GetStream();
            byte[] buffer = new byte[1024];
            int bytesRead;

            Guid guid = Guid.NewGuid();
            Clients.TryAdd(guid, client);
            Usernames.TryAdd(guid, guid.ToString());

            Guid[] keys = Clients.Keys.ToArray();

            for (int i = 0; i < keys.Length; i++)
            {
                Send(keys[i], $"*{guid}");
            }

            Console.WriteLine("");

            byte[] guidBytes = Encoding.UTF8.GetBytes(guid.ToString());
            stream.Write(guidBytes, 0, guidBytes.Length);

            try
            {
                while ((bytesRead = stream.Read(buffer, 0, buffer.Length)) != 0)
                {
                    string receivedMessage = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    if (receivedMessage.StartsWith('~'))
                    {
                        receivedMessage = receivedMessage.Remove(0, 1);
                        Console.WriteLine($"<{Usernames[guid]}> {receivedMessage}");
                        LOG.Custom(receivedMessage, Usernames[guid]);

                        // Echo message back
                        string response = $"~{Usernames[guid]}*{receivedMessage}";
                        byte[] responseBytes = Encoding.UTF8.GetBytes(response);
                        stream.Write(responseBytes, 0, responseBytes.Length);
                        LatestMessage = receivedMessage;

                        keys = Clients.Keys.ToArray();

                        for (int i = 0; i < keys.Length; i++)
                        {
                            if (keys[i] == guid)
                                continue;
                            Send(keys[i], response);
                        }
                    }
                    else if (receivedMessage.StartsWith('#'))
                    {
                        receivedMessage = receivedMessage.Remove(0, 1);
                        if (!Usernames.TryAdd(guid, receivedMessage))
                            Usernames[guid] = receivedMessage;
                    }
                }
            }
            catch
            {
                client.Close();
            }
            finally
            {
                client.Close();
            }
        }

        static void Send(TcpClient client, string message)
        {
            try
            {
                NetworkStream stream = client.GetStream();
                byte[] data = Encoding.ASCII.GetBytes(message);
                stream.Write(data, 0, data.Length);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending message to client: {ex.Message}");
            }
        }

        static void Send(Guid guid, string message)
        {
            TcpClient client = Clients[guid];
            Send(client, message);
        }
    }
}